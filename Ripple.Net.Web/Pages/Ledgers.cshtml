@page "/ledgers"
@page "/ledgers/{hash}"

@using Microsoft.AspNetCore.Blazor.Services;

<h1>Ledgers</h1>

<div class="input-group mb-3">
    <input bind=@Hash type="text" class="form-control" placeholder="Ledger hash" aria-label="Ledger hash" aria-describedby="button-addon2" />
    <div class="input-group-append">
        <button class="btn btn-outline-primary" onclick="@GetLedgerAsync">Check Ledger</button>
    </div>
</div>

@if (ledger != null)
{
    <p>Accepted: @ledger.Accepted</p>
    <p>AccountHash: @ledger.AccountHash</p>
}

@if (showLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="callout callout-danger">
        <h4>Error</h4>@errorMessage
    </div>
}

@if (!string.IsNullOrWhiteSpace(infoMessage))
{
    <div class="callout callout-info">
        <h4>Information</h4>@infoMessage
    </div>
}

@functions {
    [Parameter]
    private string Hash { get; set; }

    private Ledger ledger;
    private string errorMessage;
    private string infoMessage;
    private bool showLoading;

    protected override async Task OnInitAsync()
    {
        WebAssemblyUriHelper.Instance.OnLocationChanged += OnLocationChanged;

        if (!string.IsNullOrWhiteSpace(Hash))
        {
            await GetLedgerAsync();
        }
    }

    public void Dispose()
    {
        WebAssemblyUriHelper.Instance.OnLocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object sender, string location)
    {
        if (!string.IsNullOrWhiteSpace(Hash) && location?.IndexOf(Hash) < 0)
        {
            Hash = null;
            ledger = null;
            errorMessage = null;
            infoMessage = null;
            showLoading = false;

            // Nie wiem dlaczego, ale z jakiegoś powodu nie odświeża się ux bez tej metody
            // mimo, że powinien. Może w następnej wersji to naprawią.
            StateHasChanged();
        }
    }

    private async Task GetLedgerAsync()
    {
        ledger = null;
        errorMessage = null;
        infoMessage = null;

        if (string.IsNullOrWhiteSpace(Hash))
        {
            infoMessage = "Ledger hash is required";
            await Task.CompletedTask;
        }
        else
        {
            showLoading = true;

            Ripple.Net.Ledgers ledgers = new Ripple.Net.Ledgers();

            try
            {
                ledger = await ledgers.GetLedgerAsync(Hash);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
            finally
            {
                showLoading = false;
            }
        }
    }
}
